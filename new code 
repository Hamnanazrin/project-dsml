{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOYUJ69U4y8kti3cMzEYlSb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Hamnanazrin/project-dsml/blob/main/new%20code%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"
      ],
      "metadata": {
        "id": "fa39qaiB1gtS"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "JJHtRxvV1oJx",
        "outputId": "afdee8f8-4b0c-47be-dba5-bae6ef5ff23c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-db43e0d1-5c42-42b1-9d10-00d2d94b0bf4\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-db43e0d1-5c42-42b1-9d10-00d2d94b0bf4\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving BankMarketingCSV.csv to BankMarketingCSV.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load  Bank Marketing dataset from the uploaded file\n",
        "df = pd.read_csv('BankMarketingCSV.csv')\n",
        "\n",
        "# Drop the first column.. it's just an index column\n",
        "df = df.drop(df.columns[0], axis=1)\n",
        "\n",
        "# Display the first few rows to see what the data looks like\n",
        "print(\"--- Data Loaded ---\")\n",
        "print(\"Here is the beginning of our data:\")\n",
        "print(df.head())\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tgDGof94FVBz",
        "outputId": "64e60bfd-4a95-44a0-b773-5275f62f0145"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Data Loaded ---\n",
            "Here is the beginning of our data:\n",
            "   age            job   marital   education default  balance housing  loan  \\\n",
            "0   58     management   married    tertiary      no     2143     yes    no   \n",
            "1   44     technician    single   secondary      no       29     yes    no   \n",
            "2   33   entrepreneur   married   secondary      no        2     yes   yes   \n",
            "3   47    blue-collar   married     unknown      no     1506     yes    no   \n",
            "4   33        unknown    single     unknown      no        1      no    no   \n",
            "\n",
            "    contact  day month  duration  campaign  pdays  previous  poutcome    y  \n",
            "0   unknown    5   may       261         1     -1         0   unknown   no  \n",
            "1   unknown    5   may       151         1     -1         0   unknown   no  \n",
            "2   unknown    5   may        76         1     -1         0   unknown   no  \n",
            "3   unknown    5   may        92         1     -1         0   unknown   no  \n",
            "4   unknown    5   may       198         1     -1         0   unknown   no  \n",
            "\n",
            "==================================================\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check basic info of the dataset\n",
        "print(df.info())\n",
        "\n",
        "# Check for missing values\n",
        "print(df.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "boXXkaoOPmo1",
        "outputId": "f5ee30bb-7de9-496e-f9f6-be6fc612ae2e"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45211 entries, 0 to 45210\n",
            "Data columns (total 16 columns):\n",
            " #   Column     Non-Null Count  Dtype\n",
            "---  ------     --------------  -----\n",
            " 0   age        45211 non-null  int64\n",
            " 1   job        45211 non-null  int8 \n",
            " 2   marital    45211 non-null  int8 \n",
            " 3   education  45211 non-null  int8 \n",
            " 4   default    45211 non-null  int8 \n",
            " 5   balance    45211 non-null  int64\n",
            " 6   housing    45211 non-null  int8 \n",
            " 7   loan       45211 non-null  int8 \n",
            " 8   contact    45211 non-null  int8 \n",
            " 9   day        45211 non-null  int64\n",
            " 10  month      45211 non-null  int8 \n",
            " 11  campaign   45211 non-null  int64\n",
            " 12  pdays      45211 non-null  int64\n",
            " 13  previous   45211 non-null  int64\n",
            " 14  poutcome   45211 non-null  int8 \n",
            " 15  y          45211 non-null  int8 \n",
            "dtypes: int64(6), int8(10)\n",
            "memory usage: 2.5 MB\n",
            "None\n",
            "age          0\n",
            "job          0\n",
            "marital      0\n",
            "education    0\n",
            "default      0\n",
            "balance      0\n",
            "housing      0\n",
            "loan         0\n",
            "contact      0\n",
            "day          0\n",
            "month        0\n",
            "campaign     0\n",
            "pdays        0\n",
            "previous     0\n",
            "poutcome     0\n",
            "y            0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# DATA PREPROCESSING\n",
        "\n",
        "# Find all columns that have text data\n",
        "categorical_columns = df.select_dtypes(include=['object']).columns\n",
        "\n",
        "# Loop through these text columns and convert them to numbers\n",
        "for column in categorical_columns:\n",
        "    df[column] = df[column].astype('category').cat.codes\n",
        "\n",
        "#removing the 'duration' column because it can make the model too accurate in an unrealistic way.\n",
        "df = df.drop(columns=['duration'])\n",
        "\n",
        "# Print a summary of the data to show that all columns are now numbers\n",
        "print(\"--- Data Preprocessing Complete ---\")\n",
        "print(\"Data types after converting text to numbers:\")\n",
        "print(df.info())\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AgFyFwpGFnzC",
        "outputId": "a6a43f4e-945e-4e6f-bdae-4ca40701e7d1"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Data Preprocessing Complete ---\n",
            "Data types after converting text to numbers:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45211 entries, 0 to 45210\n",
            "Data columns (total 16 columns):\n",
            " #   Column     Non-Null Count  Dtype\n",
            "---  ------     --------------  -----\n",
            " 0   age        45211 non-null  int64\n",
            " 1   job        45211 non-null  int8 \n",
            " 2   marital    45211 non-null  int8 \n",
            " 3   education  45211 non-null  int8 \n",
            " 4   default    45211 non-null  int8 \n",
            " 5   balance    45211 non-null  int64\n",
            " 6   housing    45211 non-null  int8 \n",
            " 7   loan       45211 non-null  int8 \n",
            " 8   contact    45211 non-null  int8 \n",
            " 9   day        45211 non-null  int64\n",
            " 10  month      45211 non-null  int8 \n",
            " 11  campaign   45211 non-null  int64\n",
            " 12  pdays      45211 non-null  int64\n",
            " 13  previous   45211 non-null  int64\n",
            " 14  poutcome   45211 non-null  int8 \n",
            " 15  y          45211 non-null  int8 \n",
            "dtypes: int64(6), int8(10)\n",
            "memory usage: 2.5 MB\n",
            "None\n",
            "\n",
            "==================================================\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#  DATA VISUALIZATION\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(x='y', data=df)\n",
        "plt.title('Distribution of the Target Variable \"y\"')\n",
        "plt.xlabel('Target Variable (y)')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "# Create another plot to see the relationship between marital status and the target variable\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.countplot(x='marital', hue='y', data=df)\n",
        "plt.title('Marital Status vs. Target Variable')\n",
        "plt.xlabel('Marital Status (Encoded as Numbers)')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "print(\"--- Visualizations Displayed ---\")\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "\n",
        "# Create a bar plot to see the average 'balance' for each 'job'\n",
        "plt.figure(figsize=(15, 8))\n",
        "sns.barplot(x='job', y='balance', hue='y', data=df)\n",
        "plt.title('Average Balance by Job and Target Variable')\n",
        "plt.xlabel('Job (Encoded as Numbers)')\n",
        "plt.ylabel('Average Balance')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9aySBR39GBxd",
        "outputId": "bdd65c44-05f3-4afd-e07f-71f7ac15a75b"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Visualizations Displayed ---\n",
            "\n",
            "==================================================\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MODEL TRAINING\n",
        "# Separate the data into features (X) and the target to predict (y)\n",
        "X = df.drop('y', axis=1)\n",
        "y = df['y']\n",
        "\n",
        "# Split the data into a training set (70%) and a testing set (30%)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Create the XGBoost model\n",
        "model = XGBClassifier()\n",
        "\n",
        "# Train the model using the training data\n",
        "print(\"Starting to train the model...\")\n",
        "model.fit(X_train, y_train)\n",
        "print(\"Model training is finished!\")\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_6OB6u-XMTJ2",
        "outputId": "6724f4d9-4a45-4c1a-ee1e-2a70bf07c3f5"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting to train the model...\n",
            "Model training is finished!\n",
            "\n",
            "==================================================\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Use the trained model to make predictions on the test data\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of our model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"The model's accuracy on the test set is: {accuracy:.4f}\")\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "\n",
        "# Print a full report with more details about the model's performance\n",
        "print(\"--- Classification Report ---\")\n",
        "print(classification_report(y_test, y_pred))\n",
        "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
        "\n",
        "# Display a confusion matrix to see where the model made mistakes\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 859
        },
        "id": "ZPEfkIeCHhZA",
        "outputId": "bb6243c7-3c4f-4979-bb0d-c5730abfb0bc"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The model's accuracy on the test set is: 0.8908\n",
            "\n",
            "==================================================\n",
            "\n",
            "--- Classification Report ---\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.98      0.94     11966\n",
            "           1       0.59      0.25      0.35      1598\n",
            "\n",
            "    accuracy                           0.89     13564\n",
            "   macro avg       0.75      0.61      0.65     13564\n",
            "weighted avg       0.87      0.89      0.87     13564\n",
            "\n",
            "\n",
            "==================================================\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}